"""
AI Agent Server - Household Registration Management System
Backend server ƒë·ªÉ x·ª≠ l√Ω c√°c y√™u c·∫ßu AI chatbot
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend

# Configuration
PORT = int(os.getenv('PORT', 5000))
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'


@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "healthy", "service": "AI Agent Server"})


@app.route('/chat', methods=['POST'])
def chat():
    """
    Chat endpoint ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn t·ª´ chatbot
    POST /chat
    Body: {"message": "user message", "context": "optional context"}
    """
    try:
        data = request.json
        user_message = data.get('message', '')
        context = data.get('context', '')
        
        if not user_message:
            return jsonify({"error": "Message is required"}), 400
        
        # Process the message with AI
        response = process_message(user_message, context)
        
        return jsonify({
            "success": True,
            "response": response,
            "timestamp": get_timestamp()
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


def process_message(message: str, context: str = "") -> str:
    """
    X·ª≠ l√Ω tin nh·∫Øn v√† t·∫°o ph·∫£n h·ªìi
    
    Args:
        message: Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
        context: Context b·ªï sung (optional)
    
    Returns:
        Ph·∫£n h·ªìi t·ª´ AI
    """
    # T·∫°m th·ªùi s·ª≠ d·ª•ng logic rule-based
    # C√≥ th·ªÉ t√≠ch h·ª£p OpenAI API, LangChain, ho·∫∑c c√°c model AI kh√°c
    
    message_lower = message.lower()
    
    # H·ªá th·ªëng ch√†o h·ªèi
    if any(word in message_lower for word in ['xin ch√†o', 'hello', 'hi', 'ch√†o']):
        return "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n kh·∫©u. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng."
    
    # Tr·ª£ gi√∫p v·ªÅ h·ªô kh·∫©u
    elif any(word in message_lower for word in ['h·ªô kh·∫©u', 'ho khau', 'household']):
        return """ƒê·ªÉ qu·∫£n l√Ω h·ªô kh·∫©u, b·∫°n c√≥ th·ªÉ:
        
        1. **Xem danh s√°ch h·ªô kh·∫©u**: V√†o trang "Qu·∫£n l√Ω H·ªô kh·∫©u" ƒë·ªÉ xem t·∫•t c·∫£ h·ªô kh·∫©u
        2. **T·∫°o h·ªô kh·∫©u m·ªõi**: Click n√∫t "Th√™m h·ªô kh·∫©u" v√† ƒëi·ªÅn th√¥ng tin
        3. **Ch·ªânh s·ª≠a h·ªô kh·∫©u**: Click icon "S·ª≠a" tr√™n t·ª´ng h·ªô kh·∫©u
        4. **Xem chi ti·∫øt**: Click v√†o m√£ h·ªô kh·∫©u ƒë·ªÉ xem th√¥ng tin chi ti·∫øt
        
        M·ªói h·ªô kh·∫©u bao g·ªìm: M√£ h·ªô kh·∫©u, ƒê·ªãa ch·ªâ, Ch·ªß h·ªô v√† c√°c th√†nh vi√™n trong h·ªô."""
    
    # Tr·ª£ gi√∫p v·ªÅ nh√¢n kh·∫©u
    elif any(word in message_lower for word in ['nh√¢n kh·∫©u', 'nhan khau', 'person', 'th√†nh vi√™n']):
        return """ƒê·ªÉ qu·∫£n l√Ω nh√¢n kh·∫©u:
        
        1. **Xem danh s√°ch**: V√†o "Qu·∫£n l√Ω Nh√¢n kh·∫©u" ƒë·ªÉ xem t·∫•t c·∫£ nh√¢n kh·∫©u
        2. **Th√™m nh√¢n kh·∫©u**: C√≥ th·ªÉ th√™m t·ª´ trang "Nh√¢n kh·∫©u" ho·∫∑c t·ª´ chi ti·∫øt h·ªô kh·∫©u
        3. **T√¨m ki·∫øm**: S·ª≠ d·ª•ng thanh t√¨m ki·∫øm theo t√™n, CCCD, ngh·ªÅ nghi·ªáp
        4. **L·ªçc**: L·ªçc theo ƒë·ªô tu·ªïi, gi·ªõi t√≠nh, ƒë·ªãa ch·ªâ
        5. **Xu·∫•t d·ªØ li·ªáu**: Export Excel ho·∫∑c PDF
        
        M·ªói nh√¢n kh·∫©u c·∫ßn th√¥ng tin: H·ªç t√™n, Ng√†y sinh, CCCD, Qu√™ qu√°n, Ngh·ªÅ nghi·ªáp."""
    
    # Tr·ª£ gi√∫p v·ªÅ thu ph√≠
    elif any(word in message_lower for word in ['thu ph√≠', 'kho·∫£n thu', 'khoan thu', 'payment', 'fee']):
        return """Qu·∫£n l√Ω thu ph√≠ bao g·ªìm:
        
        1. **Kho·∫£n thu b·∫Øt bu·ªôc**: Ph√≠ v·ªá sinh, ph√≠ an ninh,...
        2. **Kho·∫£n thu ƒë√≥ng g√≥p**: ·ª¶ng h·ªô, t·ª´ thi·ªán,...
        
        C√°c ch·ª©c nƒÉng:
        - T·∫°o kho·∫£n thu m·ªõi
        - Xem chi ti·∫øt kho·∫£n thu v√† danh s√°ch ƒë√£ n·ªôp
        - Xem th·ªëng k√™: S·ªë h·ªô ƒë√£ n·ªôp, T·ªïng s·ªë ti·ªÅn
        - Ghi nh·∫≠n n·ªôp ti·ªÅn cho h·ªô kh·∫©u"""
    
    # Tr·ª£ gi√∫p v·ªÅ th·ªëng k√™
    elif any(word in message_lower for word in ['th·ªëng k√™', 'thong ke', 'dashboard', 'statistics']):
        return """B·∫£ng th·ªëng k√™ cung c·∫•p:
        
        1. **T·ªïng quan**: S·ªë h·ªô kh·∫©u, s·ªë nh√¢n kh·∫©u
        2. **Ph√¢n b·ªë ƒë·ªô tu·ªïi**: M·∫ßm non, Ti·ªÉu h·ªçc, THCS, THPT, Lao ƒë·ªông, Ngh·ªâ h∆∞u
        3. **Bi·ªÉu ƒë·ªì**: Visualize d·ªØ li·ªáu ƒë·ªô tu·ªïi
        
        V√†o trang "Dashboard" ƒë·ªÉ xem t·∫•t c·∫£ th·ªëng k√™."""
    
    # Tr·ª£ gi√∫p v·ªÅ ƒëƒÉng nh·∫≠p
    elif any(word in message_lower for word in ['ƒëƒÉng nh·∫≠p', 'dang nhap', 'login']):
        return """ƒê·ªÉ ƒëƒÉng nh·∫≠p h·ªá th·ªëng:
        
        1. Nh·∫≠p Username (v√≠ d·ª•: admin, ketoan)
        2. Nh·∫≠p Password (m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫•p)
        3. Click "ƒêƒÉng nh·∫≠p"
        
        C√≥ 2 lo·∫°i t√†i kho·∫£n:
        - **ADMIN**: To√†n quy·ªÅn qu·∫£n l√Ω
        - **ACCOUNTANT**: Qu·∫£n l√Ω kho·∫£n thu v√† thu ph√≠"""
    
    # Tr·ª£ gi√∫p chung
    elif any(word in message_lower for word in ['gi√∫p', 'help', 'h∆∞·ªõng d·∫´n', 'huong dan']):
        return """T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:
        
        - Qu·∫£n l√Ω H·ªô kh·∫©u
        - Qu·∫£n l√Ω Nh√¢n kh·∫©u
        - Thu ph√≠ v√† Kho·∫£n thu
        - Xem Th·ªëng k√™
        - H∆∞·ªõng d·∫´n ƒêƒÉng nh·∫≠p
        
        H√£y h·ªèi t√¥i v·ªÅ b·∫•t k·ª≥ ch·ª©c nƒÉng n√†o!"""
    
    # Ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh
    else:
        return f"""C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n kh·∫©u.
        
H·ªá th·ªëng n√†y gi√∫p b·∫°n:
- Qu·∫£n l√Ω h·ªô kh·∫©u v√† nh√¢n kh·∫©u
- Qu·∫£n l√Ω c√°c kho·∫£n thu ph√≠
- Xem th·ªëng k√™ v√† b√°o c√°o

B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ b·∫•t k·ª≥ t√≠nh nƒÉng n√†o c·ªßa h·ªá th·ªëng. Ho·∫∑c g√µ "gi√∫p" ƒë·ªÉ xem danh s√°ch ch·ª©c nƒÉng."""
    
    # C√≥ th·ªÉ m·ªü r·ªông v·ªõi AI models sau:
    # - OpenAI GPT API
    # - LangChain v·ªõi RAG
    # - Local LLM (Ollama, LM Studio)


def get_timestamp():
    """Get current timestamp"""
    from datetime import datetime
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


if __name__ == '__main__':
    print(f"üöÄ Starting AI Agent Server on port {PORT}")
    print(f"Debug mode: {DEBUG}")
    app.run(host='0.0.0.0', port=PORT, debug=DEBUG)

